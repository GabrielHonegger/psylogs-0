# Generated by Django 5.0.6 on 2024-07-11 14:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=60, unique=True)),
                ('idade', models.IntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)])),
                ('sexo', models.CharField(choices=[('M', 'Masculino'), ('F', 'Feminino'), ('N', 'Não Aplicável')], default='N', max_length=1)),
                ('nucleos', models.IntegerField(blank=True, default=0)),
                ('religiao', models.CharField(choices=[('C', 'Cristianismo'), ('I', 'Islamismo'), ('H', 'Hinduísmo'), ('B', 'Budismo'), ('J', 'Judaísmo'), ('E', 'Espiritismo'), ('T', 'Taioísmo'), ('A', 'Ateísmo'), ('O', 'Outra'), ('N', 'Não Aplicável')], default='N', max_length=1)),
                ('escolaridade', models.CharField(choices=[('INFANTIL', 'Educação Infantil (Pré-escola'), ('EF1', 'Ensino Fundamental I'), ('EF2', 'Ensino Fundamental II'), ('MEDIO', 'Ensino Médio'), ('TECNICO', 'Ensino Técnico e Profissionalizante'), ('SUPERIOR_INCOMPLETO', 'Ensino Superior Incompleto'), ('SUPERIOR_COMPLETO', 'Ensino Superior Completo'), ('POS_GRADUACAO', 'Pós-Graduação'), ('POS_DOUTORADO', 'Pós-Doutorado'), ('N/A', 'Não Aplicável')], default='N/A', max_length=25)),
                ('trabalho', models.CharField(default='', max_length=70)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
